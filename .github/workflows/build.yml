name: Build and Publish

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    strategy:
        matrix:
          os: [windows-latest, ubuntu-latest, macos-latest]
          include:
            - os: windows-latest
              extension: ".zip"
              runtime: "win-x64"
            - os: ubuntu-latest
              extension: ".tar.gz"
              runtime: "linux-x64"
            - os: macos-latest
              runtime: "osx-x64"
              extension: ".zip"
          node_version: [22]
        fail-fast: false
  
    runs-on: ${{ matrix.os }}

    env:
        PROJECT_NAME: "Angor"
        SOLUTION_PATH: "src/Angor.sln"
        PROJECT_PATH: "src/Angor/Server/Angor.Server.csproj"

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Variables
      run: |
          echo VERSION=$(npm run version --silent) >> $GITHUB_ENV
      shell: bash

    # - name: Restore dependencies
    #   run: dotnet restore
      
    # - name: Build
    #   run: dotnet build --configuration Release --no-restore

    - name: Publish
      run: dotnet publish -r ${{matrix.runtime}} /p:Version=${{ env.VERSION }}.${{ github.run_number }} -v m -o publish  ${{env.PROJECT_PATH}}
      env:
        matrix.runtime: ${{ matrix.os == 'windows-latest' && 'win-x64' || matrix.os == 'ubuntu-latest' && 'linux-x64' || 'osx-x64' }}

    - name: Zip Release
      run: |
        cd publish
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a -tzip "../angor-${{ env.VERSION }}-${{ matrix.runtime }}.zip" .
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          zip -r "../angor-${{ env.VERSION }}-${{ matrix.runtime }}.zip" .
        else
          zip -r "../angor-${{ env.VERSION }}-${{ matrix.runtime }}.zip" .
        fi
      shell: bash

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: angor-${{ env.VERSION }}-${{ matrix.runtime }}.zip
        path: angor-${{ env.VERSION }}-${{ matrix.runtime }}.zip

    - name: Install Rust (Stable)
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          override: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev webkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libsoup-3.0-dev libjavascriptcoregtk-4.1-dev

    - name: Install and build
      run: |
        npm install
        npm run tauri:build

    - name: Upload individual artifacts
      if: matrix.os == 'ubuntu-latest'
      run: |
          cd src-tauri/target/release/bundle
          find . -type f -name "*.*" | while read filepath; do
            filename=$(basename "$filepath")
            echo "Uploading $filename"
            echo "::group::Upload $filename"
            echo "artifact_name=angor-desktop-${{ env.VERSION }}-${filename}" >> $GITHUB_ENV
            
            # Create individual artifact upload step
            echo "
            - uses: actions/upload-artifact@v4
              with:
                name: \${{ env.artifact_name }}
                path: $filepath
            " >> $GITHUB_STEP_SUMMARY
            
            # Actually perform the upload
            gh workflow run upload-artifact --field name="${{ env.artifact_name }}" --field path="$filepath"
          done
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download single file
      run: |
            curl -O https://raw.githubusercontent.com/sondreb/angor/main/package.json
      shell: bash

    - name: Variables
      run: |
          echo VERSION=$(npm run version --silent) >> $GITHUB_ENV
      shell: bash

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Display structure of downloaded files
      run: ls -R ./
      shell: bash
      continue-on-error: true

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ env.VERSION }}
    #     release_name: Release v${{ env.VERSION }}
    #     draft: true

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ env.VERSION }}
          name: Angor (${{ env.VERSION }})
          draft: true
          files: |
            angor-*/angor-*.zip

    # - name: Upload Release Assets
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./blazor-app-${{ matrix.os }}/blazor-app-${{ matrix.os }}.zip
    #     asset_name: blazor-app-${{ matrix.os }}.zip
    #     asset_content_type: application/zip